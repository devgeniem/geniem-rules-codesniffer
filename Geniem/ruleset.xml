<?xml version="1.0"?>
<ruleset name="Geniem"
         namespace="Geniem\Sniffs"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/squizlabs/PHP_CodeSniffer/master/phpcs.xsd">
    <description>A custom set of rules to check styles for a Geniem WP projects</description>

    <!-- Exclude Composer vendor directory. -->
    <exclude-pattern>*/.git/*</exclude-pattern>
    <exclude-pattern>*/vendor/*</exclude-pattern>

    <!--
        Don't check Plugins, we might not have option (or resources) to fix them.
        These paths are specified as relative so that we can include certain files or directories
        within these directories using <file>foo/bar</file>.
    -->
    <exclude-pattern type="relative">*/mu-plugins/*</exclude-pattern>
    <exclude-pattern type="relative">*/plugins/*</exclude-pattern>

    <!-- Don't check languages -->
    <exclude-pattern type="relative">*/languages/*</exclude-pattern>

    <!-- db-error.php and object-cache.php, not ours. -->
    <exclude-pattern>*/db-error.php</exclude-pattern>
    <exclude-pattern>*/object-cache.php</exclude-pattern>

    <!-- Tests might have unusual notations which we can't check -->
    <exclude-pattern>*/tests/*</exclude-pattern>

    <!-- Skip seed data -->
    <exclude-pattern>*/data/*</exclude-pattern>

    <!-- Skip phinx seeds/migrations -->
    <exclude-pattern>db/seeds/</exclude-pattern>
    <exclude-pattern>db/migrations/</exclude-pattern>

    <!-- Exclude wp core files -->
    <exclude-pattern>/wp/wp-admin/*</exclude-pattern>
    <exclude-pattern>/wp/wp-includes/*</exclude-pattern>
    <exclude-pattern>/wp/wp-*.php</exclude-pattern>
    <exclude-pattern>/wp/index.php</exclude-pattern>
    <exclude-pattern>/wp/xmlrpc.php</exclude-pattern>
    <exclude-pattern>/wp/</exclude-pattern>

    <!-- This is from roots/bedrock and keep it as is -->
    <exclude-pattern>/mu-plugins/bedrock-autoloader.php</exclude-pattern>

    <!-- Exclude object cache -->
    <exclude-pattern>/app/object-cache.php</exclude-pattern>

    <!-- Exclude whoops debugger loaded by composer -->
    <exclude-pattern>/mu-plugins/wps/*.php</exclude-pattern>

    <!--
      Skip our custom wordpress install.php drop-in.
      This contains sql queries from the basic wp example and for good reason.
    -->
    <exclude-pattern>app/install.php</exclude-pattern>

    <!-- Make else and catch blocks to start from new line -->
    <rule ref="Geniem.ControlStructures.ElseCatchNewline"/>

    <!-- These should act as an reminder that we are not robots. -->
    <rule ref="Generic.Metrics.CyclomaticComplexity">
        <properties>
            <property name="complexity" value="15"/>
        </properties>
    </rule>
    <rule ref="Generic.Metrics.NestingLevel"/>

    <!-- We sometimes have used same class name and method name. -->
    <rule ref="Generic.NamingConventions.ConstructorName">
        <type>warning</type>
    </rule>
    <!-- Push to move away from deprecated functions, before they are removed. -->
    <rule ref="Generic.PHP.DeprecatedFunctions"/>
    <!-- There's enough space in the internet for full <?php -->
    <rule ref="Generic.PHP.DisallowShortOpenTag"/>
    <!-- Some functions are forbidden, warn about them. -->
    <rule ref="Generic.PHP.ForbiddenFunctions">
        <properties>
            <property name="error" value="false"/>
        </properties>
    </rule>
    <!-- These are really awful to debug, so please do not use them. -->
    <rule ref="Generic.PHP.NoSilencedErrors">
        <properties>
            <property name="error" value="false"/>
        </properties>
    </rule>

    <rule ref="Generic.Strings.UnnecessaryStringConcat">
        <properties>
            <property name="error" value="false"/>
        </properties>
    </rule>

    <rule ref="WordPress.Arrays.MultipleStatementAlignment">
        <properties>
            <property name="alignMultilineItems" value="!=100"/>
        </properties>
    </rule>

    <rule ref="PSR2.Methods.FunctionClosingBrace"/>

    <!-- Disallow long array syntax -->
    <rule ref="Generic.Arrays.DisallowLongArraySyntax"/>

    <!-- Allow short array syntax -->
    <rule ref="Generic.Arrays.DisallowShortArraySyntax.Found">
        <exclude name="Generic.Arrays.DisallowShortArraySyntax.Found"/>
    </rule>

    <rule ref="PSR2.Methods.FunctionClosingBrace">
        <exclude name="PSR2.Methods.FunctionClosingBrace.SpacingBeforeClose"/>
    </rule>

    <rule ref="PHPCompatibility">
        <!-- Exclude PHP constants back-filled by PHPCS. -->
        <exclude name="PHPCompatibility.PHP.NewConstants.t_finallyFound"/>
        <exclude name="PHPCompatibility.PHP.NewConstants.t_yieldFound"/>
        <exclude name="PHPCompatibility.PHP.NewConstants.t_ellipsisFound"/>
        <exclude name="PHPCompatibility.PHP.NewConstants.t_powFound"/>
        <exclude name="PHPCompatibility.PHP.NewConstants.t_pow_equalFound"/>
        <exclude name="PHPCompatibility.PHP.NewConstants.t_spaceshipFound"/>
        <exclude name="PHPCompatibility.PHP.NewConstants.t_coalesceFound"/>
        <exclude name="PHPCompatibility.PHP.NewConstants.t_coalesce_equalFound"/>
        <exclude name="PHPCompatibility.PHP.NewConstants.t_yield_fromFound"/>

        <!-- Unclear how, but appears to be back-filled anyhow, could be that PHP did so before the token was in use. -->
        <exclude name="PHPCompatibility.PHP.NewConstants.t_traitFound"/>
    </rule>

    <!--
      The soft limit on line length MUST be 100 characters
      automated style checkers MUST warn but MUST NOT error at the soft limit.
    -->
    <rule ref="Generic.Files.LineLength">
        <properties>
            <property name="lineLimit" value="120"/>
            <property name="absoluteLineLimit" value="0"/>
        </properties>
    </rule>

    <!-- All PHP files MUST use the Unix LF (linefeed) line ending. -->
    <rule ref="Generic.Files.LineEndings">
        <properties>
            <property name="eolChar" value="\n"/>
        </properties>
    </rule>

    <!-- Method arguments with default values MUST go at the end of the argument list. -->
    <rule ref="PEAR.Functions.ValidDefaultValue"/>

    <!-- This means almost always that developer used an ugly hotfix -->
    <rule ref="Squiz.PHP.CommentedOutCode"/>

    <!-- Don't allow random white spacing into multiple lines-->
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace"/>

    <!-- Don't put unused function parameters into function definition -->
    <!-- This might be problematic when using wp actions/filters -->
    <!-- This is mostly useful, We should give warning instead -->
    <rule ref="Generic.CodeAnalysis.UnusedFunctionParameter"/>

    <!-- No TODO comments, open issues in github instead -->
    <rule ref="Generic.Commenting.Todo"/>

    <!-- Don't allow oneliner ifs without brackets {} -->
    <rule ref="Generic.ControlStructures.InlineControlStructure"/>

    <!-- No spaces before comma in function calls -->
    <!-- This might be problematic when using wp actions/filters -->
    <rule ref="Generic.Functions.FunctionCallArgumentSpacing.SpaceBeforeComma"/>

    <!-- Disallow array() in favour of [] -->
    <rule ref="Generic.Arrays.DisallowLongArraySyntax"/>

    <!--
      Ending tags '?>' can be really painful to debug.
      Just disallow them in the end of the file
    -->
    <rule ref="PSR2.Files.ClosingTag.NotAllowed"/>

    <!-- <?php tags and constants (true,false,null) need to be lowercase  -->
    <rule ref="Generic.PHP.LowerCaseKeyword"/>
    <rule ref="Generic.PHP.LowerCaseConstant"/>

    <!-- Include WordPress Coding Standards with few exclusions -->
    <rule ref="WordPress">
        <!--
        We may want a middle ground though. The best way to do this is to add the
        entire ruleset, then rule by rule, remove ones that don't suit a project. We
        can do this by running `phpcs` with the '-s' flag, to see the names of the
        different Sniffs, as their rules are broken. From here, we can opt to
        exclude problematic sniffs like so.
        -->

        <!--
          These are nice but don't have any idea of context
          For example we have globals which are not user defined
        -->
        <exclude name="WordPress.VIP.ValidatedSanitizedInput.MissingUnslash"/>
        <exclude name="WordPress.VIP.ValidatedSanitizedInput.InputNotSanitized"/>

        <!-- We don't use underscores in valid hook names -->
        <exclude name="WordPress.NamingConventions.ValidHookName.UseUnderscores"/>

        <!-- Disabled the function restrictions of WP VIP because we need them. -->
        <exclude name="WordPress.PHP.RestrictedPHPFunctions"/>

        <!-- Use spaces instead of tabs -->
        <exclude name="Generic.WhiteSpace.DisallowSpaceIndent.SpacesUsed"/>

        <!-- When writing file comments, e.g. template comments, don't require a package tag -->
        <exclude name="Squiz.Commenting.FileComment.MissingPackageTag"/>

        <!--
          This forces you to put '.' in oneline comments.
          Maybe full sentences are better than comments with 1-2 words
          But we don't want to make people stop using even small comments.
        -->
        <exclude name="Squiz.Commenting.InlineComment.InvalidEndChar"/>

        <!-- Welcome to the dark side -->
        <exclude name="WordPress.PHP.YodaConditions"/>
        <exclude name="WordPress.PHP.YodaConditions.NotYoda"/>

        <!-- Does not comply with DustPress class naming conventions. -->
        <exclude name="WordPress.Files.FileName.InvalidClassFileName"/>
        <exclude name="WordPress.Files.FileName.NotHyphenatedLowercase"/>

        <!-- There are numerous cases where we want to override WP globals -->
        <exclude name="WordPress.WP.GlobalVariablesOverride.Prohibited"/>

        <!-- Exclude the rule that overrides the previously declared rule -->
        <exclude name="Squiz.ControlStructures.ControlSignature"/>

        <!-- We sometimes comment the elseif block, or similar. -->
        <exclude name="Squiz.ControlStructures.ControlSignature.SpaceAfterCloseBrace"/>

        <!-- ?:-P -->
        <exclude name="WordPress.PHP.DisallowShortTernary.Found"/>

        <exclude name="WordPress.DateTime.RestrictedFunctions.date_date" />

        <!-- These really shouldn't be excluded, but we have really good caching. -->
        <exclude name="WordPress.DB.SlowDBQuery.slow_db_query_meta_key" />
        <exclude name="WordPress.DB.SlowDBQuery.slow_db_query_meta_query" />
        <exclude name="WordPress.DB.SlowDBQuery.slow_db_query_tax_query" />

        <!-- We use these all the time. -->
        <exclude name="PEAR.Functions.FunctionCallSignature.CloseBracketLine" />
        <exclude name="PEAR.Functions.FunctionCallSignature.ContentAfterOpenBracket" />
        <exclude name="PEAR.Functions.FunctionCallSignature.MultipleArguments" />

        <exclude name="WordPress.Arrays.ArrayDeclarationSpacing.AssociativeArrayFound" />
    </rule>

    <rule ref="WordPress-Extra">
        <exclude name="WordPress.Files.FileName"/>
        <exclude name="WordPress.NamingConventions.ValidVariableName"/>
    </rule>

    <rule ref="WordPress-Docs">
        <exclude name="Squiz.Commenting.FileComment"/>
        <exclude name="Squiz.Commenting.FileComment.Missing"/>
    </rule>

    <!-- Allow dynamic indentation amounts when row starts with an object assignation arrow -->
    <rule ref="WordPress.WhiteSpace.PrecisionAlignment">
        <properties>
            <property name="ignoreAlignmentTokens" type="array" value="T_OBJECT_OPERATOR"/>
        </properties>
    </rule>

    <!-- We use these all the time. -->
    <rule ref="PEAR.Functions.FunctionCallSignature">
        <properties>
            <property name="requiredSpacesAfterOpen" value="1"/>
            <property name="requiredSpacesBeforeClose" value="1"/>

            <!-- ... and for multi-line function calls, there should only be one parameter per line. -->
            <property name="allowMultipleArguments" value="true"/>
        </properties>
    </rule>
</ruleset>
